import { Fq } from "../src/utils";
describe("Field arithmetics", () => {
    describe("Test bunch of calculations in Fq", () => {
        it("Retrieve n from y = kx + n", () => {
            const k = Fq.random();
            const n = Fq.random();
            const x1 = Fq.random();
            const y1 = Fq.add(Fq.mul(k, x1), n);
            const x2 = Fq.random();
            const y2 = Fq.add(Fq.mul(k, x2), n);
            const ydiff = Fq.sub(y2, y1);
            const xdiff = Fq.sub(x2, x1);
            const slope = Fq.div(ydiff, xdiff);
            const retrieved = Fq.sub(y1, Fq.mul(x1, slope));
            expect(retrieved).toEqual(n);
        });
        it("Lagrange in Fq", () => {
            const degree = 4;
            const coeffs = [BigInt(7), BigInt(6), BigInt(9), BigInt(1), BigInt(7)];
            const xs = [];
            for (let i = 0; i < degree; i += 1) {
                xs.push(BigInt(i));
            }
            const ys = [];
            for (let i = 0; i < degree; i += 1) {
                const x = xs[i];
                let tmpX = x;
                let y = coeffs[0];
                for (let j = 1; j < degree + 1; j += 1) {
                    y = Fq.add(y, Fq.mul(tmpX, coeffs[j]));
                    tmpX = Fq.mul(tmpX, x);
                }
                ys.push(y);
            }
            let f0 = BigInt(0);
            for (let i = 0; i < degree; i += 1) {
                let p = BigInt(1);
                for (let j = 0; j < degree; j += 1) {
                    if (j !== i) {
                        p = Fq.mul(p, Fq.div(xs[j], Fq.sub(xs[j], xs[i])));
                    }
                }
                f0 = Fq.add(f0, Fq.mul(ys[i], p));
            }
            expect(Fq.eq(f0, coeffs[0])).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtYXJ0aXRobWV0aWNzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0cy9maWVsZC1hcnRpdGhtZXRpY3MudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBRWpDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUNoRCxFQUFFLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUNyQixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUE7WUFFckIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFBO1lBQ3RCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFbkMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFBO1lBQ3RCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFbkMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDNUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFFNUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDbEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUUvQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzlCLENBQUMsQ0FBQyxDQUFBO1FBRUYsRUFBRSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtZQUN4QixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUE7WUFFaEIsTUFBTSxNQUFNLEdBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3JGLE1BQU0sRUFBRSxHQUFrQixFQUFFLENBQUE7WUFFNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNsQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ25CO1lBRUQsTUFBTSxFQUFFLEdBQWtCLEVBQUUsQ0FBQTtZQUU1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sQ0FBQyxHQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDdkIsSUFBSSxJQUFJLEdBQVcsQ0FBQyxDQUFBO2dCQUNwQixJQUFJLENBQUMsR0FBVyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBRXpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3RDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUN0QyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7aUJBQ3ZCO2dCQUVELEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDWDtZQUVELElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUVsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFFakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ1gsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtxQkFDbkQ7aUJBQ0Y7Z0JBRUQsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDbEM7WUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDekMsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnEgfSBmcm9tIFwiLi4vc3JjL3V0aWxzXCJcblxuZGVzY3JpYmUoXCJGaWVsZCBhcml0aG1ldGljc1wiLCAoKSA9PiB7XG4gIGRlc2NyaWJlKFwiVGVzdCBidW5jaCBvZiBjYWxjdWxhdGlvbnMgaW4gRnFcIiwgKCkgPT4ge1xuICAgIGl0KFwiUmV0cmlldmUgbiBmcm9tIHkgPSBreCArIG5cIiwgKCkgPT4ge1xuICAgICAgY29uc3QgayA9IEZxLnJhbmRvbSgpXG4gICAgICBjb25zdCBuID0gRnEucmFuZG9tKClcblxuICAgICAgY29uc3QgeDEgPSBGcS5yYW5kb20oKVxuICAgICAgY29uc3QgeTEgPSBGcS5hZGQoRnEubXVsKGssIHgxKSwgbilcblxuICAgICAgY29uc3QgeDIgPSBGcS5yYW5kb20oKVxuICAgICAgY29uc3QgeTIgPSBGcS5hZGQoRnEubXVsKGssIHgyKSwgbilcblxuICAgICAgY29uc3QgeWRpZmYgPSBGcS5zdWIoeTIsIHkxKVxuICAgICAgY29uc3QgeGRpZmYgPSBGcS5zdWIoeDIsIHgxKVxuXG4gICAgICBjb25zdCBzbG9wZSA9IEZxLmRpdih5ZGlmZiwgeGRpZmYpXG4gICAgICBjb25zdCByZXRyaWV2ZWQgPSBGcS5zdWIoeTEsIEZxLm11bCh4MSwgc2xvcGUpKVxuXG4gICAgICBleHBlY3QocmV0cmlldmVkKS50b0VxdWFsKG4pXG4gICAgfSlcblxuICAgIGl0KFwiTGFncmFuZ2UgaW4gRnFcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZGVncmVlID0gNFxuXG4gICAgICBjb25zdCBjb2VmZnM6IEFycmF5PGJpZ2ludD4gPSBbQmlnSW50KDcpLCBCaWdJbnQoNiksIEJpZ0ludCg5KSwgQmlnSW50KDEpLCBCaWdJbnQoNyldXG4gICAgICBjb25zdCB4czogQXJyYXk8YmlnaW50PiA9IFtdXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVncmVlOyBpICs9IDEpIHtcbiAgICAgICAgeHMucHVzaChCaWdJbnQoaSkpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHlzOiBBcnJheTxiaWdpbnQ+ID0gW11cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWdyZWU7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCB4OiBiaWdpbnQgPSB4c1tpXVxuICAgICAgICBsZXQgdG1wWDogYmlnaW50ID0geFxuICAgICAgICBsZXQgeTogYmlnaW50ID0gY29lZmZzWzBdXG5cbiAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBkZWdyZWUgKyAxOyBqICs9IDEpIHtcbiAgICAgICAgICB5ID0gRnEuYWRkKHksIEZxLm11bCh0bXBYLCBjb2VmZnNbal0pKVxuICAgICAgICAgIHRtcFggPSBGcS5tdWwodG1wWCwgeClcbiAgICAgICAgfVxuXG4gICAgICAgIHlzLnB1c2goeSlcbiAgICAgIH1cblxuICAgICAgbGV0IGYwID0gQmlnSW50KDApXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVncmVlOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHAgPSBCaWdJbnQoMSlcblxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRlZ3JlZTsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKGogIT09IGkpIHtcbiAgICAgICAgICAgIHAgPSBGcS5tdWwocCwgRnEuZGl2KHhzW2pdLCBGcS5zdWIoeHNbal0sIHhzW2ldKSkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZjAgPSBGcS5hZGQoZjAsIEZxLm11bCh5c1tpXSwgcCkpXG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChGcS5lcShmMCwgY29lZmZzWzBdKSkudG9CZSh0cnVlKVxuICAgIH0pXG4gIH0pXG59KVxuIl19