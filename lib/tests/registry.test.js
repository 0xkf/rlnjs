import Registry from "../src/registry";
describe("Registry", () => {
    describe("# Registry", () => {
        it("Should create a registry", async () => {
            const registry = new Registry();
            await registry.init();
            expect(registry.root.toString()).toContain("150197");
            expect(registry.depth).toBe(20);
            expect(registry.zeroValue).toBe(BigInt(0));
            expect(registry.members).toHaveLength(0);
        });
        it("Should not create a registry with a wrong tree depth", () => {
            const wrongRegistry = () => new Registry(33);
            expect(wrongRegistry).toThrow("The tree depth must be between 16 and 32");
        });
        it("Should create a group with different parameters", async () => {
            const registry = new Registry(32, BigInt(1));
            await registry.init();
            expect(registry.root.toString()).toContain("640470");
            expect(registry.depth).toBe(32);
            expect(registry.zeroValue).toBe(BigInt(1));
            expect(registry.members).toHaveLength(0);
        });
        describe("# addMember", () => {
            it("Should add a member to a group", async () => {
                const registry = new Registry();
                await registry.init();
                registry.addMember(BigInt(3));
                expect(registry.members).toHaveLength(1);
            });
        });
        describe("# addMembers", () => {
            it("Should add many members to a group", async () => {
                const registry = new Registry();
                await registry.init();
                registry.addMembers([BigInt(1), BigInt(3)]);
                expect(registry.members).toHaveLength(2);
            });
        });
        describe("# indexOf", () => {
            it("Should return the index of a member in a group", async () => {
                const registry = new Registry();
                await registry.init();
                registry.addMembers([BigInt(1), BigInt(3)]);
                const index = registry.indexOf(BigInt(3));
                expect(index).toBe(1);
            });
        });
        describe("# removeMember", () => {
            it("Should remove a member from a group", async () => {
                const registry = new Registry();
                await registry.init();
                registry.addMembers([BigInt(1), BigInt(3)]);
                registry.removeMember(0);
                expect(registry.members).toHaveLength(2);
                expect(registry.members[0]).toBe(registry.zeroValue);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3RzL3JlZ2lzdHJ5LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxRQUFRLE1BQU0saUJBQWlCLENBQUE7QUFFdEMsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDdEIsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7UUFDeEIsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RDLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUE7WUFDL0IsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7WUFFckIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDcEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDL0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDMUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDNUMsQ0FBQyxDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsc0RBQXNELEVBQUUsR0FBRyxFQUFFO1lBQzVELE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBRTVDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsMENBQTBDLENBQUMsQ0FBQTtRQUM3RSxDQUFDLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RCxNQUFNLFFBQVEs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QTtnQkFFeEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ3hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUN4RCxDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWdpc3RyeSBmcm9tIFwiLi4vc3JjL3JlZ2lzdHJ5XCJcblxuZGVzY3JpYmUoXCJSZWdpc3RyeVwiLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoXCIjIFJlZ2lzdHJ5XCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJTaG91bGQgY3JlYXRlIGEgcmVnaXN0cnlcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkoKVxuICAgICAgICAgICAgYXdhaXQgcmVnaXN0cnkuaW5pdCgpXG5cbiAgICAgICAgICAgIGV4cGVjdChyZWdpc3RyeS5yb290LnRvU3RyaW5nKCkpLnRvQ29udGFpbihcIjE1MDE5N1wiKVxuICAgICAgICAgICAgZXhwZWN0KHJlZ2lzdHJ5LmRlcHRoKS50b0JlKDIwKVxuICAgICAgICAgICAgZXhwZWN0KHJlZ2lzdHJ5Lnplcm9WYWx1ZSkudG9CZShCaWdJbnQoMCkpXG4gICAgICAgICAgICBleHBlY3QocmVnaXN0cnkubWVtYmVycykudG9IYXZlTGVuZ3RoKDApXG4gICAgICAgIH0pXG5cbiAgICAgICAgaXQoXCJTaG91bGQgbm90IGNyZWF0ZSBhIHJlZ2lzdHJ5IHdpdGggYSB3cm9uZyB0cmVlIGRlcHRoXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHdyb25nUmVnaXN0cnkgPSAoKSA9PiBuZXcgUmVnaXN0cnkoMzMpXG5cbiAgICAgICAgICAgIGV4cGVjdCh3cm9uZ1JlZ2lzdHJ5KS50b1Rocm93KFwiVGhlIHRyZWUgZGVwdGggbXVzdCBiZSBiZXR3ZWVuIDE2IGFuZCAzMlwiKVxuICAgICAgICB9KVxuXG4gICAgICAgIGl0KFwiU2hvdWxkIGNyZWF0ZSBhIGdyb3VwIHdpdGggZGlmZmVyZW50IHBhcmFtZXRlcnNcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkoMzIsIEJpZ0ludCgxKSlcbiAgICAgICAgICAgIGF3YWl0IHJlZ2lzdHJ5LmluaXQoKVxuXG4gICAgICAgICAgICBleHBlY3QocmVnaXN0cnkucm9vdC50b1N0cmluZygpKS50b0NvbnRhaW4oXCI2NDA0NzBcIilcbiAgICAgICAgICAgIGV4cGVjdChyZWdpc3RyeS5kZXB0aCkudG9CZSgzMilcbiAgICAgICAgICAgIGV4cGVjdChyZWdpc3RyeS56ZXJvVmFsdWUpLnRvQmUoQmlnSW50KDEpKVxuICAgICAgICAgICAgZXhwZWN0KHJlZ2lzdHJ5Lm1lbWJlcnMpLnRvSGF2ZUxlbmd0aCgwKVxuICAgICAgICB9KVxuXG4gICAgICAgIGRlc2NyaWJlKFwiIyBhZGRNZW1iZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaXQoXCJTaG91bGQgYWRkIGEgbWVtYmVyIHRvIGEgZ3JvdXBcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KClcbiAgICAgICAgICAgICAgICBhd2FpdCByZWdpc3RyeS5pbml0KClcblxuICAgICAgICAgICAgICAgIHJlZ2lzdHJ5LmFkZE1lbWJlcihCaWdJbnQoMykpXG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVnaXN0cnkubWVtYmVycykudG9IYXZlTGVuZ3RoKDEpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIGRlc2NyaWJlKFwiIyBhZGRNZW1iZXJzXCIsICgpID0+IHtcbiAgICAgICAgICAgIGl0KFwiU2hvdWxkIGFkZCBtYW55IG1lbWJlcnMgdG8gYSBncm91cFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkoKVxuICAgICAgICAgICAgICAgIGF3YWl0IHJlZ2lzdHJ5LmluaXQoKVxuXG4gICAgICAgICAgICAgICAgcmVnaXN0cnkuYWRkTWVtYmVycyhbQmlnSW50KDEpLCBCaWdJbnQoMyldKVxuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlZ2lzdHJ5Lm1lbWJlcnMpLnRvSGF2ZUxlbmd0aCgyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICBkZXNjcmliZShcIiMgaW5kZXhPZlwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpdChcIlNob3VsZCByZXR1cm4gdGhlIGluZGV4IG9mIGEgbWVtYmVyIGluIGEgZ3JvdXBcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KClcbiAgICAgICAgICAgICAgICBhd2FpdCByZWdpc3RyeS5pbml0KClcblxuICAgICAgICAgICAgICAgIHJlZ2lzdHJ5LmFkZE1lbWJlcnMoW0JpZ0ludCgxKSwgQmlnSW50KDMpXSlcblxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcmVnaXN0cnkuaW5kZXhPZihCaWdJbnQoMykpXG5cbiAgICAgICAgICAgICAgICBleHBlY3QoaW5kZXgpLnRvQmUoMSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgZGVzY3JpYmUoXCIjIHJlbW92ZU1lbWJlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpdChcIlNob3VsZCByZW1vdmUgYSBtZW1iZXIgZnJvbSBhIGdyb3VwXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSgpXG4gICAgICAgICAgICAgICAgYXdhaXQgcmVnaXN0cnkuaW5pdCgpXG5cbiAgICAgICAgICAgICAgICByZWdpc3RyeS5hZGRNZW1iZXJzKFtCaWdJbnQoMSksIEJpZ0ludCgzKV0pXG5cbiAgICAgICAgICAgICAgICByZWdpc3RyeS5yZW1vdmVNZW1iZXIoMClcblxuICAgICAgICAgICAgICAgIGV4cGVjdChyZWdpc3RyeS5tZW1iZXJzKS50b0hhdmVMZW5ndGgoMilcbiAgICAgICAgICAgICAgICBleHBlY3QocmVnaXN0cnkubWVtYmVyc1swXSkudG9CZShyZWdpc3RyeS56ZXJvVmFsdWUpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH0pXG59KVxuIl19