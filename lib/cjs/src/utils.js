"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMerkleProof = exports.generateMerkleTree = exports.genExternalNullifier = exports.Fq = exports.SNARK_FIELD_SIZE = void 0;
const solidity_1 = require("@ethersproject/solidity");
const incremental_merkle_tree_1 = require("@zk-kit/incremental-merkle-tree");
const ffjavascript_1 = require("ffjavascript");
const poseidon_lite_1 = __importDefault(require("poseidon-lite"));
/*
  This is the "Baby Jubjub" curve described here:
  https://iden3-docs.readthedocs.io/en/latest/_downloads/33717d75ab84e11313cc0d8a090b636f/Baby-Jubjub.pdf
*/
exports.SNARK_FIELD_SIZE = BigInt("21888242871839275222246405745257275088548364400416034343698204186575808495617");
// Creates the finite field
exports.Fq = new ffjavascript_1.ZqField(exports.SNARK_FIELD_SIZE);
/**
 * Generates an External Nullifier for use with RLN.
 * @param plaintext String. //TODO: better description
 * @returns External Nullifier in a string.
 */
function genExternalNullifier(plaintext) {
    const hashed = (0, solidity_1.keccak256)(["string"], [plaintext]);
    const hexStr = `0x${hashed.slice(8)}`;
    const len = 32 * 2;
    const h = hexStr.slice(2, len + 2);
    return `0x${h.padStart(len, "0")}`;
}
exports.genExternalNullifier = genExternalNullifier;
/**
 * Creates a Merkle Tree.
 * @param depth The depth of the tree.
 * @param zeroValue The zero value of the tree.
 * @param leaves The list of the leaves of the tree.
 * @returns The Merkle tree.
 */
async function generateMerkleTree(depth, zeroValue, leaves) {
    const tree = new incremental_merkle_tree_1.IncrementalMerkleTree(poseidon_lite_1.default, depth, zeroValue, 2);
    for (const leaf of leaves) {
        tree.insert(BigInt(leaf));
    }
    return tree;
}
exports.generateMerkleTree = generateMerkleTree;
/**
 * Creates a Merkle Proof.
 * @param depth The depth of the tree.
 * @param zeroValue The zero value of the tree.
 * @param leaves The list of the leaves of the tree.
 * @param leaf The leaf for which Merkle proof should be created.
 * @returns The Merkle proof.
 */
async function generateMerkleProof(depth, zeroValue, leaves, leaf) {
    if (leaf === zeroValue)
        throw new Error("Can't generate a proof for a zero leaf");
    const tree = await generateMerkleTree(depth, zeroValue, leaves);
    const leafIndex = tree.leaves.indexOf(BigInt(leaf));
    if (leafIndex === -1) {
        throw new Error("The leaf does not exist");
    }
    const merkleProof = tree.createProof(leafIndex);
    merkleProof.siblings = merkleProof.siblings.map((s) => s[0]);
    return merkleProof;
}
exports.generateMerkleProof = generateMerkleProof;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0RBQW1EO0FBQ25ELDZFQUFvRjtBQUNwRiwrQ0FBc0M7QUFFdEMsa0VBQW9DO0FBRXBDOzs7RUFHRTtBQUNXLFFBQUEsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLCtFQUErRSxDQUFDLENBQUE7QUFFdkgsMkJBQTJCO0FBQ2QsUUFBQSxFQUFFLEdBQUcsSUFBSSxzQkFBTyxDQUFDLHdCQUFnQixDQUFDLENBQUE7QUFHL0M7Ozs7R0FJRztBQUNILFNBQWdCLG9CQUFvQixDQUFDLFNBQWlCO0lBQ3BELE1BQU0sTUFBTSxHQUFHLElBQUEsb0JBQVMsRUFBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUNqRCxNQUFNLE1BQU0sR0FBRyxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUNyQyxNQUFNLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ2xCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUVsQyxPQUFPLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQTtBQUNwQyxDQUFDO0FBUEQsb0RBT0M7QUFFRDs7Ozs7O0dBTUc7QUFDSSxLQUFLLFVBQVUsa0JBQWtCLENBQUMsS0FBYSxFQUFFLFNBQW9CLEVBQUUsTUFBbUI7SUFDL0YsTUFBTSxJQUFJLEdBQUcsSUFBSSwrQ0FBcUIsQ0FBQyx1QkFBUSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFckUsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLEVBQUU7UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtLQUMxQjtJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQVJELGdEQVFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNJLEtBQUssVUFBVSxtQkFBbUIsQ0FDdkMsS0FBYSxFQUNiLFNBQW9CLEVBQ3BCLE1BQW1CLEVBQ25CLElBQWU7SUFFZixJQUFJLElBQUksS0FBSyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFBO0lBRWpGLE1BQU0sSUFBSSxHQUFHLE1BQU0sa0JBQWtCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUUvRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUVuRCxJQUFJLFNBQVMsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7S0FDM0M7SUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBRS9DLFdBQVcsQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELE9BQU8sV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFyQkQsa0RBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3NvbGlkaXR5XCJcbmltcG9ydCB7IEluY3JlbWVudGFsTWVya2xlVHJlZSwgTWVya2xlUHJvb2YgfSBmcm9tIFwiQHprLWtpdC9pbmNyZW1lbnRhbC1tZXJrbGUtdHJlZVwiXG5pbXBvcnQgeyBacUZpZWxkIH0gZnJvbSBcImZmamF2YXNjcmlwdFwiXG5pbXBvcnQgeyBTdHJCaWdJbnQgfSBmcm9tIFwiLi90eXBlc1wiXG5pbXBvcnQgcG9zZWlkb24gZnJvbSAncG9zZWlkb24tbGl0ZSdcblxuLypcbiAgVGhpcyBpcyB0aGUgXCJCYWJ5IEp1Ymp1YlwiIGN1cnZlIGRlc2NyaWJlZCBoZXJlOlxuICBodHRwczovL2lkZW4zLWRvY3MucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L19kb3dubG9hZHMvMzM3MTdkNzVhYjg0ZTExMzEzY2MwZDhhMDkwYjYzNmYvQmFieS1KdWJqdWIucGRmXG4qL1xuZXhwb3J0IGNvbnN0IFNOQVJLX0ZJRUxEX1NJWkUgPSBCaWdJbnQoXCIyMTg4ODI0Mjg3MTgzOTI3NTIyMjI0NjQwNTc0NTI1NzI3NTA4ODU0ODM2NDQwMDQxNjAzNDM0MzY5ODIwNDE4NjU3NTgwODQ5NTYxN1wiKVxuXG4vLyBDcmVhdGVzIHRoZSBmaW5pdGUgZmllbGRcbmV4cG9ydCBjb25zdCBGcSA9IG5ldyBacUZpZWxkKFNOQVJLX0ZJRUxEX1NJWkUpXG5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gRXh0ZXJuYWwgTnVsbGlmaWVyIGZvciB1c2Ugd2l0aCBSTE4uXG4gKiBAcGFyYW0gcGxhaW50ZXh0IFN0cmluZy4gLy9UT0RPOiBiZXR0ZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIEV4dGVybmFsIE51bGxpZmllciBpbiBhIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbkV4dGVybmFsTnVsbGlmaWVyKHBsYWludGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgaGFzaGVkID0ga2VjY2FrMjU2KFtcInN0cmluZ1wiXSwgW3BsYWludGV4dF0pXG4gIGNvbnN0IGhleFN0ciA9IGAweCR7aGFzaGVkLnNsaWNlKDgpfWBcbiAgY29uc3QgbGVuID0gMzIgKiAyXG4gIGNvbnN0IGggPSBoZXhTdHIuc2xpY2UoMiwgbGVuICsgMilcblxuICByZXR1cm4gYDB4JHtoLnBhZFN0YXJ0KGxlbiwgXCIwXCIpfWBcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgTWVya2xlIFRyZWUuXG4gKiBAcGFyYW0gZGVwdGggVGhlIGRlcHRoIG9mIHRoZSB0cmVlLlxuICogQHBhcmFtIHplcm9WYWx1ZSBUaGUgemVybyB2YWx1ZSBvZiB0aGUgdHJlZS5cbiAqIEBwYXJhbSBsZWF2ZXMgVGhlIGxpc3Qgb2YgdGhlIGxlYXZlcyBvZiB0aGUgdHJlZS5cbiAqIEByZXR1cm5zIFRoZSBNZXJrbGUgdHJlZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlTWVya2xlVHJlZShkZXB0aDogbnVtYmVyLCB6ZXJvVmFsdWU6IFN0ckJpZ0ludCwgbGVhdmVzOiBTdHJCaWdJbnRbXSk6IFByb21pc2U8SW5jcmVtZW50YWxNZXJrbGVUcmVlPiB7XG4gIGNvbnN0IHRyZWUgPSBuZXcgSW5jcmVtZW50YWxNZXJrbGVUcmVlKHBvc2VpZG9uLCBkZXB0aCwgemVyb1ZhbHVlLCAyKVxuXG4gIGZvciAoY29uc3QgbGVhZiBvZiBsZWF2ZXMpIHtcbiAgICB0cmVlLmluc2VydChCaWdJbnQobGVhZikpXG4gIH1cblxuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBNZXJrbGUgUHJvb2YuXG4gKiBAcGFyYW0gZGVwdGggVGhlIGRlcHRoIG9mIHRoZSB0cmVlLlxuICogQHBhcmFtIHplcm9WYWx1ZSBUaGUgemVybyB2YWx1ZSBvZiB0aGUgdHJlZS5cbiAqIEBwYXJhbSBsZWF2ZXMgVGhlIGxpc3Qgb2YgdGhlIGxlYXZlcyBvZiB0aGUgdHJlZS5cbiAqIEBwYXJhbSBsZWFmIFRoZSBsZWFmIGZvciB3aGljaCBNZXJrbGUgcHJvb2Ygc2hvdWxkIGJlIGNyZWF0ZWQuXG4gKiBAcmV0dXJucyBUaGUgTWVya2xlIHByb29mLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVNZXJrbGVQcm9vZihcbiAgZGVwdGg6IG51bWJlcixcbiAgemVyb1ZhbHVlOiBTdHJCaWdJbnQsXG4gIGxlYXZlczogU3RyQmlnSW50W10sXG4gIGxlYWY6IFN0ckJpZ0ludFxuKTogUHJvbWlzZTxNZXJrbGVQcm9vZj4ge1xuICBpZiAobGVhZiA9PT0gemVyb1ZhbHVlKSB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBnZW5lcmF0ZSBhIHByb29mIGZvciBhIHplcm8gbGVhZlwiKVxuXG4gIGNvbnN0IHRyZWUgPSBhd2FpdCBnZW5lcmF0ZU1lcmtsZVRyZWUoZGVwdGgsIHplcm9WYWx1ZSwgbGVhdmVzKVxuXG4gIGNvbnN0IGxlYWZJbmRleCA9IHRyZWUubGVhdmVzLmluZGV4T2YoQmlnSW50KGxlYWYpKVxuXG4gIGlmIChsZWFmSW5kZXggPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGxlYWYgZG9lcyBub3QgZXhpc3RcIilcbiAgfVxuXG4gIGNvbnN0IG1lcmtsZVByb29mID0gdHJlZS5jcmVhdGVQcm9vZihsZWFmSW5kZXgpXG5cbiAgbWVya2xlUHJvb2Yuc2libGluZ3MgPSBtZXJrbGVQcm9vZi5zaWJsaW5ncy5tYXAoKHMpID0+IHNbMF0pXG5cbiAgcmV0dXJuIG1lcmtsZVByb29mXG59XG4iXX0=