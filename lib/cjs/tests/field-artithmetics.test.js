"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../src/utils");
describe("Field arithmetics", () => {
    describe("Test bunch of calculations in Fq", () => {
        it("Retrieve n from y = kx + n", () => {
            const k = utils_1.Fq.random();
            const n = utils_1.Fq.random();
            const x1 = utils_1.Fq.random();
            const y1 = utils_1.Fq.add(utils_1.Fq.mul(k, x1), n);
            const x2 = utils_1.Fq.random();
            const y2 = utils_1.Fq.add(utils_1.Fq.mul(k, x2), n);
            const ydiff = utils_1.Fq.sub(y2, y1);
            const xdiff = utils_1.Fq.sub(x2, x1);
            const slope = utils_1.Fq.div(ydiff, xdiff);
            const retrieved = utils_1.Fq.sub(y1, utils_1.Fq.mul(x1, slope));
            expect(retrieved).toEqual(n);
        });
        it("Lagrange in Fq", () => {
            const degree = 4;
            const coeffs = [BigInt(7), BigInt(6), BigInt(9), BigInt(1), BigInt(7)];
            const xs = [];
            for (let i = 0; i < degree; i += 1) {
                xs.push(BigInt(i));
            }
            const ys = [];
            for (let i = 0; i < degree; i += 1) {
                const x = xs[i];
                let tmpX = x;
                let y = coeffs[0];
                for (let j = 1; j < degree + 1; j += 1) {
                    y = utils_1.Fq.add(y, utils_1.Fq.mul(tmpX, coeffs[j]));
                    tmpX = utils_1.Fq.mul(tmpX, x);
                }
                ys.push(y);
            }
            let f0 = BigInt(0);
            for (let i = 0; i < degree; i += 1) {
                let p = BigInt(1);
                for (let j = 0; j < degree; j += 1) {
                    if (j !== i) {
                        p = utils_1.Fq.mul(p, utils_1.Fq.div(xs[j], utils_1.Fq.sub(xs[j], xs[i])));
                    }
                }
                f0 = utils_1.Fq.add(f0, utils_1.Fq.mul(ys[i], p));
            }
            expect(utils_1.Fq.eq(f0, coeffs[0])).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtYXJ0aXRobWV0aWNzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0cy9maWVsZC1hcnRpdGhtZXRpY3MudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUFpQztBQUVqQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7UUFDaEQsRUFBRSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtZQUNwQyxNQUFNLENBQUMsR0FBRyxVQUFFLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDckIsTUFBTSxDQUFDLEdBQUcsVUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFBO1lBRXJCLE1BQU0sRUFBRSxHQUFHLFVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUN0QixNQUFNLEVBQUUsR0FBRyxVQUFFLENBQUMsR0FBRyxDQUFDLFVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBRW5DLE1BQU0sRUFBRSxHQUFHLFVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUN0QixNQUFNLEVBQUUsR0FBRyxVQUFFLENBQUMsR0FBRyxDQUFDLFVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBRW5DLE1BQU0sS0FBSyxHQUFHLFVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQzVCLE1BQU0sS0FBSyxHQUFHLFVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBRTVCLE1BQU0sS0FBSyxHQUFHLFVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO1lBQ2xDLE1BQU0sU0FBUyxHQUFHLFVBQUUsQ0FBQyxHQUFHLENBQUMsRUFB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LENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZxIH0gZnJvbSBcIi4uL3NyYy91dGlsc1wiXG5cbmRlc2NyaWJlKFwiRmllbGQgYXJpdGhtZXRpY3NcIiwgKCkgPT4ge1xuICBkZXNjcmliZShcIlRlc3QgYnVuY2ggb2YgY2FsY3VsYXRpb25zIGluIEZxXCIsICgpID0+IHtcbiAgICBpdChcIlJldHJpZXZlIG4gZnJvbSB5ID0ga3ggKyBuXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGsgPSBGcS5yYW5kb20oKVxuICAgICAgY29uc3QgbiA9IEZxLnJhbmRvbSgpXG5cbiAgICAgIGNvbnN0IHgxID0gRnEucmFuZG9tKClcbiAgICAgIGNvbnN0IHkxID0gRnEuYWRkKEZxLm11bChrLCB4MSksIG4pXG5cbiAgICAgIGNvbnN0IHgyID0gRnEucmFuZG9tKClcbiAgICAgIGNvbnN0IHkyID0gRnEuYWRkKEZxLm11bChrLCB4MiksIG4pXG5cbiAgICAgIGNvbnN0IHlkaWZmID0gRnEuc3ViKHkyLCB5MSlcbiAgICAgIGNvbnN0IHhkaWZmID0gRnEuc3ViKHgyLCB4MSlcblxuICAgICAgY29uc3Qgc2xvcGUgPSBGcS5kaXYoeWRpZmYsIHhkaWZmKVxuICAgICAgY29uc3QgcmV0cmlldmVkID0gRnEuc3ViKHkxLCBGcS5tdWwoeDEsIHNsb3BlKSlcblxuICAgICAgZXhwZWN0KHJldHJpZXZlZCkudG9FcXVhbChuKVxuICAgIH0pXG5cbiAgICBpdChcIkxhZ3JhbmdlIGluIEZxXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGRlZ3JlZSA9IDRcblxuICAgICAgY29uc3QgY29lZmZzOiBBcnJheTxiaWdpbnQ+ID0gW0JpZ0ludCg3KSwgQmlnSW50KDYpLCBCaWdJbnQoOSksIEJpZ0ludCgxKSwgQmlnSW50KDcpXVxuICAgICAgY29uc3QgeHM6IEFycmF5PGJpZ2ludD4gPSBbXVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZ3JlZTsgaSArPSAxKSB7XG4gICAgICAgIHhzLnB1c2goQmlnSW50KGkpKVxuICAgICAgfVxuXG4gICAgICBjb25zdCB5czogQXJyYXk8YmlnaW50PiA9IFtdXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVncmVlOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgeDogYmlnaW50ID0geHNbaV1cbiAgICAgICAgbGV0IHRtcFg6IGJpZ2ludCA9IHhcbiAgICAgICAgbGV0IHk6IGJpZ2ludCA9IGNvZWZmc1swXVxuXG4gICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgZGVncmVlICsgMTsgaiArPSAxKSB7XG4gICAgICAgICAgeSA9IEZxLmFkZCh5LCBGcS5tdWwodG1wWCwgY29lZmZzW2pdKSlcbiAgICAgICAgICB0bXBYID0gRnEubXVsKHRtcFgsIHgpXG4gICAgICAgIH1cblxuICAgICAgICB5cy5wdXNoKHkpXG4gICAgICB9XG5cbiAgICAgIGxldCBmMCA9IEJpZ0ludCgwKVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZ3JlZTsgaSArPSAxKSB7XG4gICAgICAgIGxldCBwID0gQmlnSW50KDEpXG5cbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkZWdyZWU7IGogKz0gMSkge1xuICAgICAgICAgIGlmIChqICE9PSBpKSB7XG4gICAgICAgICAgICBwID0gRnEubXVsKHAsIEZxLmRpdih4c1tqXSwgRnEuc3ViKHhzW2pdLCB4c1tpXSkpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGYwID0gRnEuYWRkKGYwLCBGcS5tdWwoeXNbaV0sIHApKVxuICAgICAgfVxuXG4gICAgICBleHBlY3QoRnEuZXEoZjAsIGNvZWZmc1swXSkpLnRvQmUodHJ1ZSlcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==